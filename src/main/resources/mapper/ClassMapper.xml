<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="thedrivers.upbus.mapper.ClassMapper">
	<!-- 1. 클래스 강사 신청 데이터 추가 SQL (USER) -->
	<insert id="classAddTeacher" parameterType="String">
		INSERT INTO class_teacher_signup
		( class_teacher_signup_code 			
		, class_teacher_email				
		, class_teacher_name										
		, class_teacher_phone_number		
		, member_id									
		, class_teacher_team						
		, class_teacher_signup_file			
		, class_teacher_schedule_file			
		, class_teacher_resum_file				
		, class_teacher_signup_datetime	
		) 
		VALUES
		(	(SELECT common_sf_nextval('class_teacher_signup_') FROM DUAL )
		,	#{classTechaerEmail}
		,	#{classTeacherName} 
		,	#{classTeacherPhoneNumber} 
		,	#{sessionID}
		,	#{classTeacherTeam} 
		,	#{classTeacherSignupFile} 
		,	#{classTeacherScheduleFile} 
		,	#{classTeacherResumFile} 
		,	CURDATE()
		);
	</insert>
	
	<!-- 2. 클래스 강사 데이터 조회하여 리스트로 반환하는 SQL 문 (ADMIN) -->
	<select id="getClassAddTeacherList" resultType="ClassAddTeacherList">
		SELECT 
			class_teacher_signup_code					AS  classTeacherSignupCode
		,	class_teacher_name							AS	classTeacherName
		,	class_teacher_email							AS	classTeacherEmail
		,	class_teacher_team							AS	classTeacherTeam
		,	class_teacher_phone_number					AS	classTeacherPhoneMumber
		,	class_teacher_signup_file					AS	classTeacherSignupFile
		,	class_teacher_resum_file					AS	classTeacherResumFile
		,	class_teacher_schedule_file					AS	classTeacherScheduleFile
		,	class_teacher_signup_datetime				AS	classTeacherSignupDatetime
		,	class_term_approve_check					AS  classTermApproveCheck
		,	class_term_approve_datetime					AS	classTermApproveDatetime
		,	class_teacher_signup_approve_check			AS	classTeacherSignupApproveCheck
		,	class_teacher_signup_approve_datetime		AS	classTeacherSignupApproveDatetime
		,	member_id									AS	memberId
		FROM 
			class_teacher_signup;
	</select>
	
	<!-- 2-1. 클래스 강사 테이블에서  클래스 기간에 대하여 승인(1), 승인날짜(현재날짜) 으로 바꾸어주는 수정 SQL 문 -->
	<update id="modifyClassAddTeacherCheck">
		UPDATE class_teacher_signup
		<if test="termApproveRequestResult == 1">
		SET
			class_term_approve_check= 1
		,	class_term_approve_datetime= CURDATE()
		</if>
		
		<if test="termApproveRequestResult == 0">
		SET
			class_term_approve_check= 0
		,	class_term_approve_datetime= NULL
		</if>
		WHERE
			class_teacher_signup_code = #{signupCode};
	</update>
	
	<!-- 2-2. 클래스 강사 테이블에서  클래스 최종 승인에 대하여 강승인(1), 승인날짜(현재날짜) 으로 바꾸어주는 수정 SQL 문 -->
	<update id="modifyClassAddTeacherFinalCheck">
		UPDATE class_teacher_signup
		<if test="finalApproveRequestResult == 1">
		SET
			class_teacher_signup_approve_check = 1
		,	class_teacher_signup_approve_datetime = CURDATE()
		</if>
		
		<if test="finalApproveRequestResult == 0">
		SET
			class_teacher_signup_approve_check = 0
		,	class_teacher_signup_approve_datetime = NULL
		</if>
		WHERE
			class_teacher_signup_code = #{signupCode};
	</update>
	
	<!-- 2-3 클래스 강사 테이블에서 클래스 최종 승인이 된 경우에는 member 의 class_teacher_diviison(클래스선생구분)의 속성을 1로 변경한다.-->
	<update id="modifyMemberTeacherDivision" >
		UPDATE	
			class_teacher_signup AS cts
			INNER JOIN
			member AS m
			ON
			cts.member_id = m.member_id
		<if test="finalApproveRequestResult == 1">
		SET 
			m.class_teacher_division = 1
		WHERE
			class_teacher_signup_approve_check = 1
			AND
			class_teacher_signup_code = #{signupCode};
		</if>
		<if test="finalApproveRequestResult == 0">
		SET 
			m.class_teacher_division = 0
		WHERE
			class_teacher_signup_approve_check = 0
			AND
			class_teacher_signup_code = #{signupCode};
		</if>

	</update>
	
	<!-- 3. 클래스 강사 신청 데이터 추가 SQL (USER) -->
	<insert id="addClassNotice" parameterType="ClassNotice">
		INSERT INTO class_notice
		(	class_notice_code
		,	class_name
		,	class_teacher_name
		,	class_content
		,	class_registration_cost
		,	class_goal_count
		,	class_least_count
		,	class_notice_register_date
		,	class_notice_start_date
		,	class_notice_end_date	)
		VALUES 
		(	(SELECT common_sf_nextval('class_notice_') FROM DUAL )
		, 	#{className} 
		,	#{classTeacherName} 
		,	#{classContent} 
		,	#{classRegistrationCost} 
		,	#{classGoalCount} 
		,	#{classLeastCount} 
		,	CURDATE()
		,	#{classNoticeStartDate} 
		,	#{classNoticeEndDate} )
	</insert>	
	
</mapper>
